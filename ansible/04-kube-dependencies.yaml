---
- hosts: fleet
  become: yes
  tasks:

  - name: grab the swap space used (in megabytes)
    shell: free -m | grep Swap | awk '{print $2}'
    register: swap_used

  # Kubernetes wants swap disabled
  - name: disable swap for current session
    command: swapoff -a
    become: true
    when: (swap_used.stdout_lines[0] | int) > 1

  - name: disable swap permanently, persist reboots
    replace:
      path: /etc/fstab
      regexp: '^(\s*)([^#\n]+\s+)(\w+\s+)swap(\s+.*)$'
      replace: '#\1\2\3swap\4'
      backup: yes

  # Useful for debugging
  - name: install net-tools
    package:
      name:
      - net-tools
      - curl
      state: present

  - name: install security packages
    package:
      name:
      - gpg
      - ca-certificates
      - apt-transport-https
      state: present

  - name: install crio
    block:
      - name: ensure versions of Docker /runc  are not installed.
        package:
          name:
            - docker
            - docker-engine
            - runc
          state: absent

      - name: create libcontainers directory
        file:
          path: "{{ crio_libcontainers_path }}"
          state: directory
          mode: 0755

      - name: create cache dir
        file:
          path: "{{ crio_key_cache_path }}"
          state: directory
          mode: 0755
        register: create_cachedir

      - name: download libcontainers key
        get_url:
          url: "{{ crio_libcontainers_key_url }}"
          dest: "{{ crio_key_cache_path }}/Release.key"
        register: repo_key_file

      - name: dearmor libcontainers key
        shell: gpg --batch --dearmor -o {{ crio_libcontainers_path }}/libcontainers-archive-keyring.gpg {{ create_cachedir.path }}/Release.key
        args:
          warn: false
        when: repo_key_file.changed

      - name: add libcontainers repository
        apt_repository:
          repo: "deb [signed-by=/usr/share/keyrings/libcontainers-archive-keyring.gpg] https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ crio_os }}/ /"
          state: present

      - name: download libcontainers crio key
        get_url:
          url: "{{ crio_libcontainers_crio_key_url }}"
          dest: "{{ crio_key_cache_path }}/Release_crio.key"
        register: repo_key_file

      - name: dearmor libcontainers crio key
        shell: gpg --batch --dearmor -o {{ crio_libcontainers_path }}/libcontainers-crio-archive-keyring.gpg {{ crio_key_cache_path }}/Release_crio.key
        args:
          warn: false
        when: repo_key_file.changed

      - name: add libcontainers crio repository
        apt_repository:
          repo: "deb [signed-by=/usr/share/keyrings/libcontainers-crio-archive-keyring.gpg] https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ crio_version }}/{{ crio_os }}/ /"
          state: present

      - name: install crio packages
        package:
          name:
            - cri-o
            - cri-o-runc
            - cri-tools
          state: present

  - name: configure crio
    block:
    - name: make sure crio unit is running
      systemd:
        state: started
        name: crio
        enabled: yes

    # This config conflicts with Kubernetes/Calico.
    - name: delete bridge config
      file:
        path: /etc/cni/net.d/100-crio-bridge.conf
        state: absent

    - name: add crio config to use systemd instead of cgroupfs
      copy:
        content: |
          [crio.runtime]
          conmon = "/usr/bin/conmon"
          conmon_cgroup = "system.slice"
          cgroup_manager = "systemd"
        dest: /etc/crio/crio.conf.d/02-group-manager.conf
        mode: 0644
      notify:
      - restart crio

  - name: install kubernetes
    block:
    - name: add Kubernetes apt-key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: add Kubernetes' APT repository
      apt_repository:
       repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
       state: present
       filename: 'kubernetes'

    - name: install kubernetes
      apt:
        name:
        - kubelet={{ kube_version }}
        - kubeadm={{ kube_version }}
        - kubectl={{ kube_version }}
        state: present
        update_cache: true

    # Hold back updates as updating kubernetes requires special attention.
    - name: hold back updates to kubelet
      dpkg_selections:
        name: kubelet
        selection: hold

    - name: hold back updates to kubeadm
      dpkg_selections:
        name: kubeadm
        selection: hold

    - name: hold back updates to kubectl
      dpkg_selections:
        name: kubectl
        selection: hold

  - name: get node ip6 address
    shell: "ip route get {{ hostvars['edge'].fleet_ip6 }} | awk '{print $9}'"
    register: route_result

  - name: set ipv6 address fact
    set_fact:
      fleet_ip6: "{{ route_result.stdout_lines[0] }}"

  # We need to set the node ip so the kubelet binds to the correct interface. Otherwise it might bind to the node public ip.
  - name: configure private network ip for kubelet
    lineinfile:
      backup: yes
      dest: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
      regexp: '^ExecStart='
      line: 'ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS --node-ip={{ fleet_ip6 }}'
    notify:
    - restart kubelet

  - name: enable cgroupv2
    lineinfile:
      dest: /etc/default/grub
      regexp: "^GRUB_CMDLINE_LINUX="
      line: 'GRUB_CMDLINE_LINUX="systemd.unified_cgroup_hierarchy=1 cgroup_enable=memory swapaccount=1"'
    notify:
    - update grub
    - reboot

  handlers:
  - name: restart kubelet
    systemd:
      name: kubelet
      state: restarted
      daemon_reload: true

  - name: restart crio
    systemd:
      name: crio
      state: restarted

  - name: update grub
    command: update-grub

  - name: reboot
    reboot:
